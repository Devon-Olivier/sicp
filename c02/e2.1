#lang racket

(define (make-rat numerator denominator) 
  (let ((g (gcd numerator denominator)))
    (if (< denominator 0)
        (cons (/ (- numerator) g) (/ (- denominator) g))
        (cons (/ numerator g) (/ denominator g)))))
(define (print-rat x)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (numer rat) (car rat))
(define (denom rat) (cdr rat))

(define (add-rat x y) (make-rat (+ (* (numer x) (denom y))
                                   (* (numer y) (denom x)))
                                (* (denom x) (denom y))))
(define (add-inverse x) (make-rat (- (numer x)) (denom x)))
(define (sub-rat x y) (add-rat x (add-inverse y)));;using add-inverse seems significantly less efficient than hard coding.
(define (mul-rat x y) (make-rat (* (numer x) (numer y))
                                (* (denom x) (denom y))))
(define (mul-inverse x) (make-rat (denom x)
                                  (numer x)))
(define (div-rat x y) (mul-rat x (mul-inverse y)))